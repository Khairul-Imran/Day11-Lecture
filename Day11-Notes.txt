- There are some notes in the slides too.


--------------------------------------------------Diagram-------------------------------------------------
In his diagrams:
- Dotted arrow represents a reference.

- View Engine
- Frontend-Controller knows how to redirect the requests. Knows the existing routes that the client's requests can go.
It manages the different requests.


These are what we will learn to do:
- Controller (4th)
- Service - Able to read from multiple tables, and process it. (3rd)
- Repo - A single function that helps to updates your records? (2nd)
(In our case, the service and repo might do similar things, and you need just the service instead.)
- Model - Contains representations of your objects. This is often the first folder you create.
- View
- DB


---------------------------------------------Spring Initializr---------------------------------------------
- Group is your package name

Dependencies chosen:
- Spring Web Dependency
- Thymeleaf
- Spring Boot DevTools - Detects changes in your code, and automatically rebuilds/recompile for you.
- Lombok - Helps to reduce the need to write boilerplate code.

When you need to use additional plugins/packages, you can go to the maven repository website to find it.
It will give you the dependencies that you need to be put in the pom file.


---------------------------------------------Inside our demo app---------------------------------------------

Template Folder:
- All the Thymeleaf templates should be in there.
- Revise what all the different parts of your app is for (the different folders)

He showed the pom (project object model) file too
- He showed how to add new dependencies

He showed how to switch between different java versions also
- Because railway only supports up to java 17, might need to change versions for that.
- If not, you can dockerize your app, so that you can run on different java versions.

He talked about the application.properties file
- you put configuration settings there.

He went through all the commands for maven:
- he showed mvn clean / clean package -> deletes all the previous dependencies, and updates them, and recompiles them
- When running the jar file, need to be inside the "target" directory. Or you can specify the path to the jar folder -> ./target etc....

What is port 8080? -> an unused port on your device that can be used to run an application.
- If there is already an app running on that port, then you need to use another port.

He showed how devtool helps you to automatically refresh your application after making changes.


Next, we created the files for the "static" folder.
- Created an index.html file inside -> he showed the '!' shorcut for boilerplate code.
- Created an "Images" folder inside.



- He recommended us to learn bootstrap 5 for styling (alternative to using CSS)*****************
- Copied the code found inside their docs into my html.
- Did alot of stuff regarding columns, rows, tables etc. go see code.
- usefule for upcoming things that we would work on like forms.

******Important******
- You can see your html page in the browser using localhost.
- When you use /index.html, the browser knows to find any static pages you might have.
- E.g. http://localhost:8080/index.html

- We also created an error.html file inside our templates folder.
- When we search random stuff like localhost:8080/blabla
- we will go to the error page automatically, because blabla doesn't exist.


******
- find out when is it necessary to compile, package, run!!!!! 
- Be familiar on when to use what command.

*****************Changing Ports*****************
- Can refer to slides also.

- We can also change the port inside the command line
** Not sure why the slides way can't do, will see why.

- Another way is to specify it inside the application.properties folder.
(can see inside slides)






---------------------------------------------------Lombok-----------------------------------------------------
- He talked about how lombok helps you to reduce boilerplate code (getters, setters, etc.) with annotations.
- For getters and setters, @toString, @EqualsHashCode, use @Data
- More info at their documentation.


---------------------------------------------------Shortcut---------------------------------------------------
Shift + Option + F -> helps you format your code nicely!!**************